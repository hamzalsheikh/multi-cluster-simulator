// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: trader.proto

package trader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceChannelClient is the client API for ResourceChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceChannelClient interface {
	Start(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (ResourceChannel_StartClient, error)
}

type resourceChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceChannelClient(cc grpc.ClientConnInterface) ResourceChannelClient {
	return &resourceChannelClient{cc}
}

func (c *resourceChannelClient) Start(ctx context.Context, in *StartParams, opts ...grpc.CallOption) (ResourceChannel_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourceChannel_ServiceDesc.Streams[0], "/trader.ResourceChannel/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &resourceChannelStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourceChannel_StartClient interface {
	Recv() (*ClusterState, error)
	grpc.ClientStream
}

type resourceChannelStartClient struct {
	grpc.ClientStream
}

func (x *resourceChannelStartClient) Recv() (*ClusterState, error) {
	m := new(ClusterState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourceChannelServer is the server API for ResourceChannel service.
// All implementations must embed UnimplementedResourceChannelServer
// for forward compatibility
type ResourceChannelServer interface {
	Start(*StartParams, ResourceChannel_StartServer) error
	mustEmbedUnimplementedResourceChannelServer()
}

// UnimplementedResourceChannelServer must be embedded to have forward compatible implementations.
type UnimplementedResourceChannelServer struct {
}

func (UnimplementedResourceChannelServer) Start(*StartParams, ResourceChannel_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedResourceChannelServer) mustEmbedUnimplementedResourceChannelServer() {}

// UnsafeResourceChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceChannelServer will
// result in compilation errors.
type UnsafeResourceChannelServer interface {
	mustEmbedUnimplementedResourceChannelServer()
}

func RegisterResourceChannelServer(s grpc.ServiceRegistrar, srv ResourceChannelServer) {
	s.RegisterService(&ResourceChannel_ServiceDesc, srv)
}

func _ResourceChannel_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourceChannelServer).Start(m, &resourceChannelStartServer{stream})
}

type ResourceChannel_StartServer interface {
	Send(*ClusterState) error
	grpc.ServerStream
}

type resourceChannelStartServer struct {
	grpc.ServerStream
}

func (x *resourceChannelStartServer) Send(m *ClusterState) error {
	return x.ServerStream.SendMsg(m)
}

// ResourceChannel_ServiceDesc is the grpc.ServiceDesc for ResourceChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trader.ResourceChannel",
	HandlerType: (*ResourceChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _ResourceChannel_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trader.proto",
}
